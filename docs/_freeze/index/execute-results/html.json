{
  "hash": "ef2a64a3a8fd529816da9df2f0277792",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Fave Syllabify\nfilters: \n    - codeblocklabel\n---\n\n![](https://img.shields.io/badge/Lifecycle-Maturing-lightgreen)\n![PyPI version](https://badge.fury.io/py/fave-syllabify.svg)\n[![Lint and Test](https://github.com/Forced-Alignment-and-Vowel-Extraction/fave-syllabify/actions/workflows/lint-and-test.yml/badge.svg)](https://github.com/Forced-Alignment-and-Vowel-Extraction/fave-syllabify/actions/workflows/lint-and-test.yml)\n[![Build Docs](https://github.com/Forced-Alignment-and-Vowel-Extraction/fave-syllabify/actions/workflows/build_docs.yml/badge.svg)](https://forced-alignment-and-vowel-extraction.github.io/fave-syllabify/)\n[![codecov](https://codecov.io/gh/Forced-Alignment-and-Vowel-Extraction/fave-syllabify/graph/badge.svg?token=WDBJ0O9P6L)](https://codecov.io/gh/Forced-Alignment-and-Vowel-Extraction/fave-syllabify)\n\nThis is a work in progress.\n\n## Installation\n\n```bash\npip install fave-syllabify\n```\n\n## Usage\n\nImport classes and functions\n\n::: {#1c825624 .cell execution_count=1}\n``` {.python .cell-code}\nfrom aligned_textgrid import AlignedTextGrid, custom_classes\nfrom fave_syllabify import syllabify_tg\nfrom pathlib import Path\n```\n:::\n\n\nRead in a textgrid\n\n::: {#1ed0427d .cell execution_count=2}\n``` {.python .cell-code}\ntg = AlignedTextGrid(\n    textgrid_path=Path(\n        \"data\",\n        \"josef-fruehwald_speaker.TextGrid\"\n    ),\n    entry_classes=custom_classes(\n        [\"Word\", \"Phone\"]\n    )\n)\n\nprint(tg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlignedTextGrid with 1 groups named ['group_0'] each with [2] tiers. [['Word', 'Phone']]\n```\n:::\n:::\n\n\nSyllabify the textgrid\n\n::: {#5c287f34 .cell execution_count=3}\n``` {.python .cell-code}\nsyllabify_tg(tg)\n\nprint(tg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlignedTextGrid with 1 groups named ['group_0'] each with [4] tiers. [['Word', 'Syllable', 'SylPart', 'Phone']]\n```\n:::\n:::\n\n\n### Exploring the syllabification\n\n::: {#7cb04638 .cell execution_count=4}\n``` {.python .cell-code}\nword_tier = tg.group_0.Word\nraindrops = word_tier[5]\n\nprint(raindrops.label)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nraindrops\n```\n:::\n:::\n\n\nEach syllable is labelled with its stress.\n\n::: {#6051ed44 .cell execution_count=5}\n``` {.python .cell-code}\nprint([\n    syl.label \n    for syl in raindrops.contains\n])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['syl-1', 'syl-2']\n```\n:::\n:::\n\n\nEach syllable contains its constituent parts in a flat hierarchy (there's no rhyme constituent).\n\n::: {#e5bd2030 .cell execution_count=6}\n``` {.python .cell-code}\nsyl = raindrops.first.fol\nprint([\n    part.label\n    for part in syl.contains\n])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['onset', 'nucleus', 'coda']\n```\n:::\n:::\n\n\nEach constituent contains its relevant phone.\n\n::: {#b69b46a0 .cell execution_count=7}\n``` {.python .cell-code}\nonset = syl.onset\nprint([\n    phone.label\n    for phone in onset\n])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['D', 'R']\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}